--- |
  ; ModuleID = 'kruskal_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @find(i32 %x, i32* %par) #0 {
    %1 = getelementptr inbounds i32, i32* %par, i32 %x
    %2 = load i32, i32* %1, align 4
    %3 = icmp ne i32 %2, %x
    br i1 %3, label %4, label %8
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds i32, i32* %par, i32 %x
    %6 = load i32, i32* %5, align 4
    %7 = call arm_aapcscc i32 @find(i32 %6, i32* %par) #2
    br label %12
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds i32, i32* %par, i32 %x
    %10 = load i32, i32* %9, align 4
    %11 = call arm_aapcscc i32 @find(i32 %10, i32* %par) #2
    br label %12
  
  ; <label>:12                                      ; preds = %8, %4
    %result.0 = phi i32 [ %7, %4 ], [ %x, %8 ]
    ret i32 %result.0
  }
  
  ; Function Attrs: nounwind
  define arm_aapcscc void @kruskal_enter(i32* %g, i32* %mst, i32* %par, i32 %len) #0 {
    %1 = call i8* @llvm.stacksave()
    %2 = alloca i32, i32 %len, align 4
    %3 = alloca i32, i32 %len, align 4
    br label %4
  
  ; <label>:4                                       ; preds = %6, %0
    %i.0 = phi i32 [ 0, %0 ], [ %7, %6 ]
    %5 = icmp slt i32 %i.0, %len
    br i1 %5, label %6, label %8
  
  ; <label>:6                                       ; preds = %4
    %scevgep7 = getelementptr i32, i32* %mst, i32 %i.0
    store i32 -1, i32* %scevgep7, align 4
    %scevgep6 = getelementptr i32, i32* %2, i32 %i.0
    store i32 -1, i32* %scevgep6, align 4
    %scevgep5 = getelementptr i32, i32* %par, i32 %i.0
    store i32 %i.0, i32* %scevgep5, align 4
    %scevgep4 = getelementptr i32, i32* %3, i32 %i.0
    store i32 %i.0, i32* %scevgep4, align 4
    %7 = add nsw i32 %i.0, 1
    br label %4
  
  ; <label>:8                                       ; preds = %4, %23
    %lsr.iv = phi i32 [ %lsr.iv.next, %23 ], [ 0, %4 ]
    %idx.0 = phi i32 [ %idx.1, %23 ], [ 0, %4 ]
    %9 = add i32 %lsr.iv, 1
    %10 = icmp slt i32 %9, %len
    br i1 %10, label %11, label %24
  
  ; <label>:11                                      ; preds = %8
    %scevgep2 = getelementptr i32, i32* %g, i32 %lsr.iv
    %scevgep3 = getelementptr i32, i32* %scevgep2, i32 1
    %12 = load i32, i32* %scevgep3, align 4
    %13 = call arm_aapcscc i32 @find(i32 %12, i32* %par) #2
    %scevgep = getelementptr i32, i32* %g, i32 %lsr.iv
    %scevgep1 = getelementptr i32, i32* %scevgep, i32 2
    %14 = load i32, i32* %scevgep1, align 4
    %15 = call arm_aapcscc i32 @find(i32 %14, i32* %par) #2
    %16 = icmp ne i32 %13, %15
    br i1 %16, label %17, label %23
  
  ; <label>:17                                      ; preds = %11
    %18 = add nsw i32 %idx.0, 1
    %19 = getelementptr inbounds i32, i32* %mst, i32 %18
    store i32 %13, i32* %19, align 4
    %20 = add nsw i32 %18, 1
    %21 = getelementptr inbounds i32, i32* %mst, i32 %20
    store i32 %15, i32* %21, align 4
    %22 = getelementptr inbounds i32, i32* %par, i32 %13
    store i32 %15, i32* %22, align 4
    br label %23
  
  ; <label>:23                                      ; preds = %11, %17
    %idx.1 = phi i32 [ %20, %17 ], [ %idx.0, %11 ]
    %lsr.iv.next = add nuw nsw i32 %lsr.iv, 2
    br label %8
  
  ; <label>:24                                      ; preds = %8
    %25 = sdiv i32 %idx.0, 2
    %26 = add nsw i32 %25, 1
    %27 = bitcast i32* %mst to i32*
    store i32 %26, i32* %27, align 4
    call void @llvm.stackrestore(i8* %1)
    ret void
  }
  
  ; Function Attrs: nounwind
  declare i8* @llvm.stacksave() #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackrestore(i8*) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { nounwind "target-cpu"="cortex-m0" }
  attributes #2 = { nobuiltin }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            find
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
  - { id: 3, class: tgpr }
  - { id: 4, class: tgpr }
  - { id: 5, class: tgpr }
  - { id: 6, class: tgpr }
  - { id: 7, class: tgpr }
  - { id: 8, class: tgpr }
  - { id: 9, class: tgpr }
  - { id: 10, class: tgpr }
  - { id: 11, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%2' }
  - { reg: '%r1', virtual-reg: '%3' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 16):
    successors: %bb.1(50), %bb.2(50)
    liveins: %r0, %r1
  
    %3 = COPY %r1
    %2 = COPY %r0
    %4, %cpsr = tLSLri %2, 2, 14, _
    %5 = tLDRr %3, %4, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    tCMPr killed %5, %2, 14, _, implicit-def %cpsr
    tBcc %bb.2, 0, %cpsr
    tB %bb.1, 14, _
  
  bb.1 (%ir-block.4, freq 8):
    successors: %bb.3(100)
  
    %10 = tLDRr %3, %4, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %10
    %r1 = COPY %3
    tBL 14, _, @find, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %11 = COPY %r0
    %0 = COPY %11
    tB %bb.3, 14, _
  
  bb.2 (%ir-block.8, freq 8):
    successors: %bb.3(100)
  
    %7 = tLDRr %3, %4, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.9)
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %7
    %r1 = COPY %3
    tBL 14, _, @find, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
  
  bb.3 (%ir-block.12, freq 16):
    liveouts: %r0
  
    %1 = PHI %2, %bb.2, %0, %bb.1
    %r0 = COPY %1
    tBX_RET 14, _, implicit %r0

...
--- |
  ; ModuleID = 'kruskal_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @find(i32 %x, i32* %par) #0 {
    %1 = getelementptr inbounds i32, i32* %par, i32 %x
    %2 = load i32, i32* %1, align 4
    %3 = icmp ne i32 %2, %x
    br i1 %3, label %4, label %8
  
  ; <label>:4                                       ; preds = %0
    %5 = getelementptr inbounds i32, i32* %par, i32 %x
    %6 = load i32, i32* %5, align 4
    %7 = call arm_aapcscc i32 @find(i32 %6, i32* %par) #2
    br label %12
  
  ; <label>:8                                       ; preds = %0
    %9 = getelementptr inbounds i32, i32* %par, i32 %x
    %10 = load i32, i32* %9, align 4
    %11 = call arm_aapcscc i32 @find(i32 %10, i32* %par) #2
    br label %12
  
  ; <label>:12                                      ; preds = %8, %4
    %result.0 = phi i32 [ %7, %4 ], [ %x, %8 ]
    ret i32 %result.0
  }
  
  ; Function Attrs: nounwind
  define arm_aapcscc void @kruskal_enter(i32* %g, i32* %mst, i32* %par, i32 %len) #0 {
    %1 = call i8* @llvm.stacksave()
    %2 = alloca i32, i32 %len, align 4
    %3 = alloca i32, i32 %len, align 4
    br label %4
  
  ; <label>:4                                       ; preds = %6, %0
    %i.0 = phi i32 [ 0, %0 ], [ %7, %6 ]
    %5 = icmp slt i32 %i.0, %len
    br i1 %5, label %6, label %8
  
  ; <label>:6                                       ; preds = %4
    %scevgep7 = getelementptr i32, i32* %mst, i32 %i.0
    store i32 -1, i32* %scevgep7, align 4
    %scevgep6 = getelementptr i32, i32* %2, i32 %i.0
    store i32 -1, i32* %scevgep6, align 4
    %scevgep5 = getelementptr i32, i32* %par, i32 %i.0
    store i32 %i.0, i32* %scevgep5, align 4
    %scevgep4 = getelementptr i32, i32* %3, i32 %i.0
    store i32 %i.0, i32* %scevgep4, align 4
    %7 = add nsw i32 %i.0, 1
    br label %4
  
  ; <label>:8                                       ; preds = %4, %23
    %lsr.iv = phi i32 [ %lsr.iv.next, %23 ], [ 0, %4 ]
    %idx.0 = phi i32 [ %idx.1, %23 ], [ 0, %4 ]
    %9 = add i32 %lsr.iv, 1
    %10 = icmp slt i32 %9, %len
    br i1 %10, label %11, label %24
  
  ; <label>:11                                      ; preds = %8
    %scevgep2 = getelementptr i32, i32* %g, i32 %lsr.iv
    %scevgep3 = getelementptr i32, i32* %scevgep2, i32 1
    %12 = load i32, i32* %scevgep3, align 4
    %13 = call arm_aapcscc i32 @find(i32 %12, i32* %par) #2
    %scevgep = getelementptr i32, i32* %g, i32 %lsr.iv
    %scevgep1 = getelementptr i32, i32* %scevgep, i32 2
    %14 = load i32, i32* %scevgep1, align 4
    %15 = call arm_aapcscc i32 @find(i32 %14, i32* %par) #2
    %16 = icmp ne i32 %13, %15
    br i1 %16, label %17, label %23
  
  ; <label>:17                                      ; preds = %11
    %18 = add nsw i32 %idx.0, 1
    %19 = getelementptr inbounds i32, i32* %mst, i32 %18
    store i32 %13, i32* %19, align 4
    %20 = add nsw i32 %18, 1
    %21 = getelementptr inbounds i32, i32* %mst, i32 %20
    store i32 %15, i32* %21, align 4
    %22 = getelementptr inbounds i32, i32* %par, i32 %13
    store i32 %15, i32* %22, align 4
    br label %23
  
  ; <label>:23                                      ; preds = %11, %17
    %idx.1 = phi i32 [ %20, %17 ], [ %idx.0, %11 ]
    %lsr.iv.next = add nuw nsw i32 %lsr.iv, 2
    br label %8
  
  ; <label>:24                                      ; preds = %8
    %25 = sdiv i32 %idx.0, 2
    %26 = add nsw i32 %25, 1
    %27 = bitcast i32* %mst to i32*
    store i32 %26, i32* %27, align 4
    call void @llvm.stackrestore(i8* %1)
    ret void
  }
  
  ; Function Attrs: nounwind
  declare i8* @llvm.stacksave() #1
  
  ; Function Attrs: nounwind
  declare void @llvm.stackrestore(i8*) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { nounwind "target-cpu"="cortex-m0" }
  attributes #2 = { nobuiltin }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            kruskal_enter
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
  - { id: 3, class: tgpr }
  - { id: 4, class: tgpr }
  - { id: 5, class: tgpr }
  - { id: 6, class: tgpr }
  - { id: 7, class: tgpr }
  - { id: 8, class: tgpr }
  - { id: 9, class: tgpr }
  - { id: 10, class: tgpr }
  - { id: 11, class: tgpr }
  - { id: 12, class: tgpr }
  - { id: 13, class: tgpr }
  - { id: 14, class: tgpr }
  - { id: 15, class: tgpr }
  - { id: 16, class: tgpr }
  - { id: 17, class: tgpr }
  - { id: 18, class: tgpr }
  - { id: 19, class: tgpr }
  - { id: 20, class: tgpr }
  - { id: 21, class: tgpr }
  - { id: 22, class: tgpr }
  - { id: 23, class: tgpr }
  - { id: 24, class: tgpr }
  - { id: 25, class: tgpr }
  - { id: 26, class: tgpr }
  - { id: 27, class: tgpr }
  - { id: 28, class: tgpr }
  - { id: 29, class: tgpr }
  - { id: 30, class: tgpr }
  - { id: 31, class: tgpr }
  - { id: 32, class: tgpr }
  - { id: 33, class: tgpr }
  - { id: 34, class: tgpr }
  - { id: 35, class: tgpr }
  - { id: 36, class: tgpr }
  - { id: 37, class: tgpr }
  - { id: 38, class: tgpr }
  - { id: 39, class: tgpr }
  - { id: 40, class: tgpr }
  - { id: 41, class: tgpr }
  - { id: 42, class: tgpr }
  - { id: 43, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%12' }
  - { reg: '%r1', virtual-reg: '%13' }
  - { reg: '%r2', virtual-reg: '%14' }
  - { reg: '%r3', virtual-reg: '%15' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: '<unnamed alloca>', type: variable-sized, offset: 0, 
      alignment: 1, local-offset: 0 }
  - { id: 1, name: '<unnamed alloca>', type: variable-sized, offset: 0, 
      alignment: 1, local-offset: 0 }
body:             |
  bb.0 (%ir-block.0, freq 8):
    successors: %bb.1(100)
    liveins: %r0, %r1, %r2, %r3
  
    %15 = COPY %r3
    %14 = COPY %r2
    %13 = COPY %r1
    %12 = COPY %r0
    %17, %cpsr = tMOVi8 7, 14, _
    %18, %cpsr = tMVN killed %17, 14, _
    %19, %cpsr = tLSLri %15, 2, 14, _
    %20, %cpsr = tADDi3 killed %19, 7, 14, _
    %21, %cpsr = tAND %20, killed %18, 14, _
    %22 = COPY %sp
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %23 = COPY %sp
    %1, %cpsr = tSUBrr %23, %21, 14, _
    %sp = COPY %1
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %24 = COPY %sp
    %2, %cpsr = tSUBrr %24, %21, 14, _
    %sp = COPY %2
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %16, %cpsr = tMOVi8 0, 14, _
    %0 = COPY %22
  
  bb.1 (%ir-block.4, freq 256):
    successors: %bb.2(96), %bb.8(3)
  
    %3 = PHI %16, %bb.0, %4, %bb.2
    tCMPr %3, %15, 14, _, implicit-def %cpsr
    tBcc %bb.2, 11, %cpsr
  
  bb.8 (freq 8):
    successors: %bb.3(100)
  
    tB %bb.3, 14, _
  
  bb.2 (%ir-block.6, freq 248):
    successors: %bb.1(100)
  
    %41, %cpsr = tLSLri %3, 2, 14, _
    %42, %cpsr = tMOVi8 0, 14, _
    %43, %cpsr = tMVN killed %42, 14, _
    tSTRr %43, %13, %41, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep7)
    tSTRr %43, %1, %41, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep6)
    tSTRr %3, %14, %41, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep5)
    tSTRr %3, %2, %41, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.scevgep4)
    %4, %cpsr = tADDi3 %3, 1, 14, _
    tB %bb.1, 14, _
  
  bb.3 (%ir-block.8, freq 256):
    successors: %bb.4(96), %bb.7(3)
  
    %5 = PHI %16, %bb.8, %11, %bb.6
    %6 = PHI %16, %bb.8, %10, %bb.6
    %26, %cpsr = tADDi3 %5, 1, 14, _
    tCMPr killed %26, %15, 14, _, implicit-def %cpsr
    tBcc %bb.7, 10, %cpsr
    tB %bb.4, 14, _
  
  bb.4 (%ir-block.11, freq 248):
    successors: %bb.5(50), %bb.6(50)
  
    %31, %cpsr = tLSLri %5, 2, 14, _
    %32, %cpsr = tADDrr %12, killed %31, 14, _
    %33 = tLDRi %32, 1, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep3)
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %33
    %r1 = COPY %14
    tBL 14, _, @find, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %34 = COPY %r0
    %35 = tLDRi %32, 2, 14, _, <0x4e435a0> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.scevgep1)
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %35
    %r1 = COPY %14
    tBL 14, _, @find, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %36 = COPY %r0
    tCMPr %34, %36, 14, _, implicit-def %cpsr
    tBcc %bb.6, 0, %cpsr
    tB %bb.5, 14, _
  
  bb.5 (%ir-block.17, freq 124):
    successors: %bb.6(100)
  
    %7 = COPY %34
    %8 = COPY %36
    %37, %cpsr = tLSLri %6, 2, 14, _
    %38, %cpsr = tADDrr killed %37, %13, 14, _
    tSTRi %7, killed %38, 1, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.19)
    %9, %cpsr = tADDi3 %6, 2, 14, _
    %39, %cpsr = tLSLri %9, 2, 14, _
    tSTRr %8, %13, killed %39, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.21)
    %40, %cpsr = tLSLri %34, 2, 14, _
    tSTRr %8, %14, killed %40, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.22)
  
  bb.6 (%ir-block.23, freq 248):
    successors: %bb.3(100)
  
    %10 = PHI %6, %bb.4, %9, %bb.5
    %11, %cpsr = tADDi3 %5, 2, 14, _
    tB %bb.3, 14, _
  
  bb.7 (%ir-block.24, freq 8):
    liveouts:
  
    %27, %cpsr = tLSRri %6, 31, 14, _
    %28, %cpsr = tADDrr %6, killed %27, 14, _
    %29, %cpsr = tASRri killed %28, 1, 14, _
    %30, %cpsr = tADDi3 killed %29, 1, 14, _
    tSTRi killed %30, %13, 0, 14, _, <0x4ea8050> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.27)
    %sp = COPY %0
    tBX_RET 14, _

...
