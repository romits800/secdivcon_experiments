--- |
  ; ModuleID = 'mulmod8_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: nounwind
  define i32 @mulmod8_enter(i32 signext %a, i32 signext %b) #0 {
    %res = alloca i32, align 4
    %1 = and i32 undef, 255
    %2 = and i32 undef, 255
    %3 = and i32 %a, 255
    %4 = and i32 %b, 255
    %5 = icmp eq i32 %3, 0
    br i1 %5, label %6, label %15
  
  ; <label>:6                                       ; preds = %0
    %7 = sub nsw i32 257, %4
    %8 = mul nsw i32 %7, %4
    %9 = and i32 %8, 255
    %10 = ashr i32 %8, 8
    %11 = sub nsw i32 %9, %10
    %12 = icmp slt i32 %9, %10
    %13 = select i1 %12, i32 1, i32 0
    %14 = add nsw i32 %11, %13
    store volatile i32 %14, i32* %res, align 4
    br label %35
  
  ; <label>:15                                      ; preds = %0
    %16 = icmp eq i32 %4, 0
    br i1 %16, label %17, label %26
  
  ; <label>:17                                      ; preds = %15
    %18 = sub nsw i32 257, %3
    %19 = mul nsw i32 %18, %18
    %20 = and i32 %19, 255
    %21 = ashr i32 %19, 8
    %22 = sub nsw i32 %20, %21
    %23 = icmp slt i32 %20, %21
    %24 = select i1 %23, i32 0, i32 1
    %25 = add nsw i32 %22, %24
    store volatile i32 %25, i32* %res, align 4
    br label %35
  
  ; <label>:26                                      ; preds = %15
    %27 = sub nsw i32 257, %4
    %28 = mul nsw i32 %3, %4
    %29 = and i32 %28, 255
    %30 = ashr i32 %28, 8
    %31 = sub nsw i32 %29, %30
    %32 = icmp slt i32 %29, %30
    %33 = select i1 %32, i32 1, i32 0
    %34 = add nsw i32 %31, %33
    store volatile i32 %27, i32* %res, align 4
    br label %35
  
  ; <label>:35                                      ; preds = %17, %26, %6
    %.1 = phi i32 [ %7, %6 ], [ %18, %17 ], [ %34, %26 ]
    %36 = and i32 %.1, 255
    ret i32 %36
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            mulmod8_enter
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%6' }
  - { reg: '%a1', virtual-reg: '%7' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: res, offset: 0, size: 4, alignment: 4 }
body:             |
  bb.0 (%ir-block.0, freq 34):
    successors: %bb.1(37), %bb.2(62)
    liveins: %a0, %a1
  
    %7 = COPY %a1
    %6 = COPY %a0
    %1 = ANDi %7, 255
    %0 = ANDi %6, 255
    BNE %0, %zero, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.6, freq 12):
    successors: %bb.5(100)
  
    %23 = ADDiu %zero, 257
    %2 = SUBu killed %23, %1
    %24 = MUL %2, %1, implicit-def dead %hi0, implicit-def dead %lo0
    %25 = SRL %24, 8
    %26 = ANDi %24, 255
    %27 = SUBu %26, %25
    %28 = SLT %26, %25
    %29 = ADDu killed %27, killed %28
    SW killed %29, %stack.0.res, 0, <0x4992d90> = !{!"unison-memory-partition", i32 0} :: (volatile store 4 into %ir.res)
    B %bb.5, implicit-def dead %at
  
  bb.2 (%ir-block.15, freq 21):
    successors: %bb.3(37), %bb.4(62)
  
    BNE %1, %zero, %bb.4, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.17, freq 8):
    successors: %bb.5(100)
  
    %15 = ADDiu %zero, 257
    %3 = SUBu killed %15, %0
    %16 = MUL %3, %3, implicit-def dead %hi0, implicit-def dead %lo0
    %17 = SRL %16, 8
    %18 = ANDi %16, 255
    %19 = SUBu %18, %17
    %20 = SLT %18, %17
    %21 = XORi killed %20, 1
    %22 = ADDu killed %19, killed %21
    SW killed %22, %stack.0.res, 0, <0x4992d90> = !{!"unison-memory-partition", i32 0} :: (volatile store 4 into %ir.res)
    B %bb.5, implicit-def dead %at
  
  bb.4 (%ir-block.26, freq 13):
    successors: %bb.5(100)
  
    %8 = MUL %0, %1, implicit-def dead %hi0, implicit-def dead %lo0
    %9 = ADDiu %zero, 257
    %10 = SUBu killed %9, %1
    SW killed %10, %stack.0.res, 0, <0x4992d90> = !{!"unison-memory-partition", i32 0} :: (volatile store 4 into %ir.res)
    %11 = SRL %8, 8
    %12 = ANDi %8, 255
    %13 = SUBu %12, %11
    %14 = SLT %12, %11
    %4 = ADDu killed %13, killed %14
  
  bb.5 (%ir-block.35, freq 34):
    liveouts: %v0
  
    %5 = PHI %4, %bb.4, %3, %bb.3, %2, %bb.1
    %30 = ANDi %5, 255
    %v0 = COPY %30
    RetRA implicit %v0

...
--- |
  ; ModuleID = 'mulmod8_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: nounwind
  define i32 @mulmod8_enter(i32 signext %a, i32 signext %b) #0 {
    %res = alloca i32, align 4
    %1 = and i32 undef, 255
    %2 = and i32 undef, 255
    %3 = and i32 %a, 255
    %4 = and i32 %b, 255
    %5 = icmp eq i32 %3, 0
    br i1 %5, label %6, label %15
  
  ; <label>:6                                       ; preds = %0
    %7 = sub nsw i32 257, %4
    %8 = mul nsw i32 %7, %4
    %9 = and i32 %8, 255
    %10 = ashr i32 %8, 8
    %11 = sub nsw i32 %9, %10
    %12 = icmp slt i32 %9, %10
    %13 = select i1 %12, i32 1, i32 0
    %14 = add nsw i32 %11, %13
    store volatile i32 %14, i32* %res, align 4
    br label %35
  
  ; <label>:15                                      ; preds = %0
    %16 = icmp eq i32 %4, 0
    br i1 %16, label %17, label %26
  
  ; <label>:17                                      ; preds = %15
    %18 = sub nsw i32 257, %3
    %19 = mul nsw i32 %18, %18
    %20 = and i32 %19, 255
    %21 = ashr i32 %19, 8
    %22 = sub nsw i32 %20, %21
    %23 = icmp slt i32 %20, %21
    %24 = select i1 %23, i32 0, i32 1
    %25 = add nsw i32 %22, %24
    store volatile i32 %25, i32* %res, align 4
    br label %35
  
  ; <label>:26                                      ; preds = %15
    %27 = sub nsw i32 257, %4
    %28 = mul nsw i32 %3, %4
    %29 = and i32 %28, 255
    %30 = ashr i32 %28, 8
    %31 = sub nsw i32 %29, %30
    %32 = icmp slt i32 %29, %30
    %33 = select i1 %32, i32 1, i32 0
    %34 = add nsw i32 %31, %33
    store volatile i32 %27, i32* %res, align 4
    br label %35
  
  ; <label>:35                                      ; preds = %17, %26, %6
    %.1 = phi i32 [ %7, %6 ], [ %18, %17 ], [ %34, %26 ]
    %36 = and i32 %.1, 255
    ret i32 %36
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            mulmod8_enter
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%6' }
  - { reg: '%a1', virtual-reg: '%7' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: res, offset: 0, size: 4, alignment: 4 }
body:             |
  bb.0 (%ir-block.0, freq 34):
    successors: %bb.1(37), %bb.2(62)
    liveins: %a0, %a1
  
    %7 = COPY %a1
    %6 = COPY %a0
    %1 = ANDi %7, 255
    %0 = ANDi %6, 255
    BNE %0, %zero, %bb.2, implicit-def dead %at
    B %bb.1, implicit-def dead %at
  
  bb.1 (%ir-block.6, freq 12):
    successors: %bb.5(100)
  
    %23 = ADDiu %zero, 257
    %2 = SUBu killed %23, %1
    %24 = MUL %2, %1, implicit-def dead %hi0, implicit-def dead %lo0
    %25 = SRL %24, 8
    %26 = ANDi %24, 255
    %27 = SUBu %26, %25
    %28 = SLT %26, %25
    %29 = ADDu killed %27, killed %28
    SW killed %29, %stack.0.res, 0, <0x4992d90> = !{!"unison-memory-partition", i32 0} :: (volatile store 4 into %ir.res)
    B %bb.5, implicit-def dead %at
  
  bb.2 (%ir-block.15, freq 21):
    successors: %bb.3(37), %bb.4(62)
  
    BNE %1, %zero, %bb.4, implicit-def dead %at
    B %bb.3, implicit-def dead %at
  
  bb.3 (%ir-block.17, freq 8):
    successors: %bb.5(100)
  
    %15 = ADDiu %zero, 257
    %3 = SUBu killed %15, %0
    %16 = MUL %3, %3, implicit-def dead %hi0, implicit-def dead %lo0
    %17 = SRL %16, 8
    %18 = ANDi %16, 255
    %19 = SUBu %18, %17
    %20 = SLT %18, %17
    %21 = XORi killed %20, 1
    %22 = ADDu killed %19, killed %21
    SW killed %22, %stack.0.res, 0, <0x4992d90> = !{!"unison-memory-partition", i32 0} :: (volatile store 4 into %ir.res)
    B %bb.5, implicit-def dead %at
  
  bb.4 (%ir-block.26, freq 13):
    successors: %bb.5(100)
  
    %8 = MUL %0, %1, implicit-def dead %hi0, implicit-def dead %lo0
    %9 = ADDiu %zero, 257
    %10 = SUBu killed %9, %1
    SW killed %10, %stack.0.res, 0, <0x4992d90> = !{!"unison-memory-partition", i32 0} :: (volatile store 4 into %ir.res)
    %11 = SRL %8, 8
    %12 = ANDi %8, 255
    %13 = SUBu %12, %11
    %14 = SLT %12, %11
    %4 = ADDu killed %13, killed %14
  
  bb.5 (%ir-block.35, freq 34):
    liveouts: %v0
  
    %5 = PHI %4, %bb.4, %3, %bb.3, %2, %bb.1
    %30 = ANDi %5, 255
    %v0 = COPY %30
    RetRA implicit %v0

...
