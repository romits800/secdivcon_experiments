--- |
  ; ModuleID = 'kruskal_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: norecurse nounwind
  define void @kruskal_enter(i32* nocapture readonly %g, i32* nocapture %mst, i32* nocapture %par, i32 signext %len) #0 {
    %1 = icmp sgt i32 %len, 0
    br i1 %1, label %.lr.ph5, label %._crit_edge
  
  .preheader:                                       ; preds = %.lr.ph5
    %2 = icmp sgt i32 %len, 1
    br i1 %2, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr i32, i32* %g, i32 2
    br label %.lr.ph
  
  .lr.ph5:                                          ; preds = %0, %.lr.ph5
    %lsr.iv5 = phi i32* [ %scevgep6, %.lr.ph5 ], [ %mst, %0 ]
    %lsr.iv3 = phi i32* [ %scevgep4, %.lr.ph5 ], [ %par, %0 ]
    %i.03 = phi i32 [ %3, %.lr.ph5 ], [ 0, %0 ]
    store i32 -1, i32* %lsr.iv5, align 4
    store i32 %i.03, i32* %lsr.iv3, align 4
    %3 = add nuw nsw i32 %i.03, 1
    %scevgep4 = getelementptr i32, i32* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i32, i32* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %len, %3
    br i1 %exitcond, label %.preheader, label %.lr.ph5
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi i32* [ %scevgep1, %13 ], [ %scevgep, %.lr.ph.preheader ]
    %idx.02 = phi i32 [ %idx.1, %13 ], [ 0, %.lr.ph.preheader ]
    %i1.01 = phi i32 [ %14, %13 ], [ 1, %.lr.ph.preheader ]
    %scevgep2 = getelementptr i32, i32* %lsr.iv, i32 -1
    %4 = load i32, i32* %scevgep2, align 4
    %5 = load i32, i32* %lsr.iv, align 4
    %6 = icmp eq i32 %4, %5
    br i1 %6, label %13, label %7
  
  ; <label>:7                                       ; preds = %.lr.ph
    %8 = add nsw i32 %idx.02, 1
    %9 = getelementptr inbounds i32, i32* %mst, i32 %8
    store i32 %4, i32* %9, align 4
    %10 = add nsw i32 %idx.02, 2
    %11 = getelementptr inbounds i32, i32* %mst, i32 %10
    store i32 %5, i32* %11, align 4
    %12 = getelementptr inbounds i32, i32* %par, i32 %4
    store i32 %5, i32* %12, align 4
    br label %13
  
  ; <label>:13                                      ; preds = %7, %.lr.ph
    %idx.1 = phi i32 [ %10, %7 ], [ %idx.02, %.lr.ph ]
    %14 = add nuw nsw i32 %i1.01, 2
    %scevgep1 = getelementptr i32, i32* %lsr.iv, i32 2
    %15 = icmp slt i32 %14, %len
    br i1 %15, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %13, %.preheader, %0
    %idx.0.lcssa = phi i32 [ 0, %.preheader ], [ 0, %0 ], [ %idx.1, %13 ]
    %16 = sdiv i32 %idx.0.lcssa, 2
    %17 = add nsw i32 %16, 1
    store i32 %17, i32* %mst, align 4
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            kruskal_enter
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%17' }
  - { reg: '%a1', virtual-reg: '%18' }
  - { reg: '%a2', virtual-reg: '%19' }
  - { reg: '%a3', virtual-reg: '%20' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.8(62), %bb.7.._crit_edge(37)
    liveins: %a0, %a1, %a2, %a3
  
    %20 = COPY %a3
    %19 = COPY %a2
    %18 = COPY %a1
    %17 = COPY %a0
    %21 = ADDiu %zero, 0
    BLEZ %20, %bb.7.._crit_edge, implicit-def %at
  
  bb.8 (freq 16):
    successors: %bb.3..lr.ph5(100)
  
    %22 = ADDiu %zero, -1
    B %bb.3..lr.ph5, implicit-def %at
  
  bb.1..preheader (freq 16):
    successors: %bb.2..lr.ph.preheader(50), %bb.7.._crit_edge(50)
  
    %24 = SLTi %20, 2
    BNE killed %24, %zero, %bb.7.._crit_edge, implicit-def dead %at
    B %bb.2..lr.ph.preheader, implicit-def dead %at
  
  bb.2..lr.ph.preheader (freq 8):
    successors: %bb.4..lr.ph(100)
  
    %0 = ADDiu %17, 8
    %26 = ADDiu %zero, 1
    %25 = ADDiu %zero, 0
    B %bb.4..lr.ph, implicit-def dead %at
  
  bb.3..lr.ph5 (freq 511):
    successors: %bb.1..preheader(3), %bb.3..lr.ph5(96)
  
    %1 = PHI %18, %bb.8, %6, %bb.3..lr.ph5
    %2 = PHI %19, %bb.8, %5, %bb.3..lr.ph5
    %3 = PHI %21, %bb.8, %4, %bb.3..lr.ph5
    SW %22, %1, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv5)
    SW %3, %2, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv3)
    %6 = ADDiu %1, 4
    %5 = ADDiu %2, 4
    %4 = ADDiu %3, 1
    BEQ %20, %4, %bb.1..preheader, implicit-def dead %at
    B %bb.3..lr.ph5, implicit-def dead %at
  
  bb.4..lr.ph (freq 255):
    successors: %bb.6(50), %bb.5(50)
  
    %7 = PHI %0, %bb.2..lr.ph.preheader, %15, %bb.6
    %8 = PHI %25, %bb.2..lr.ph.preheader, %13, %bb.6
    %9 = PHI %26, %bb.2..lr.ph.preheader, %14, %bb.6
    %11 = LW %7, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv)
    %10 = LW %7, -4, <0x3ac3d40> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.scevgep2)
    BEQ %10, %11, %bb.6, implicit-def dead %at
    B %bb.5, implicit-def dead %at
  
  bb.5 (%ir-block.7, freq 127):
    successors: %bb.6(100)
  
    %27 = SLL %8, 2
    %28 = ADDu killed %27, %18
    SW %10, killed %28, 4, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.9)
    %12 = ADDiu %8, 2
    %29 = SLL %12, 2
    %30 = ADDu %18, killed %29
    SW %11, killed %30, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.11)
    %31 = SLL %10, 2
    %32 = ADDu %19, killed %31
    SW %11, killed %32, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.12)
  
  bb.6 (%ir-block.13, freq 255):
    successors: %bb.4..lr.ph(96), %bb.7.._crit_edge(3)
  
    %13 = PHI %8, %bb.4..lr.ph, %12, %bb.5
    %14 = ADDiu %9, 2
    %33 = SLT %14, %20
    %15 = ADDiu %7, 8
    BNE killed %33, %zero, %bb.4..lr.ph, implicit-def dead %at
    B %bb.7.._crit_edge, implicit-def dead %at
  
  bb.7.._crit_edge (freq 25):
    liveouts:
  
    %16 = PHI %21, %bb.0, %21, %bb.1..preheader, %13, %bb.6
    %34 = SRL %16, 31
    %35 = ADDu %16, killed %34
    %36 = SRA killed %35, 1
    %37 = ADDiu killed %36, 1
    SW killed %37, %18, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.mst)
    RetRA

...
--- |
  ; ModuleID = 'kruskal_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: norecurse nounwind
  define void @kruskal_enter(i32* nocapture readonly %g, i32* nocapture %mst, i32* nocapture %par, i32 signext %len) #0 {
    %1 = icmp sgt i32 %len, 0
    br i1 %1, label %.lr.ph5, label %._crit_edge
  
  .preheader:                                       ; preds = %.lr.ph5
    %2 = icmp sgt i32 %len, 1
    br i1 %2, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr i32, i32* %g, i32 2
    br label %.lr.ph
  
  .lr.ph5:                                          ; preds = %0, %.lr.ph5
    %lsr.iv5 = phi i32* [ %scevgep6, %.lr.ph5 ], [ %mst, %0 ]
    %lsr.iv3 = phi i32* [ %scevgep4, %.lr.ph5 ], [ %par, %0 ]
    %i.03 = phi i32 [ %3, %.lr.ph5 ], [ 0, %0 ]
    store i32 -1, i32* %lsr.iv5, align 4
    store i32 %i.03, i32* %lsr.iv3, align 4
    %3 = add nuw nsw i32 %i.03, 1
    %scevgep4 = getelementptr i32, i32* %lsr.iv3, i32 1
    %scevgep6 = getelementptr i32, i32* %lsr.iv5, i32 1
    %exitcond = icmp eq i32 %len, %3
    br i1 %exitcond, label %.preheader, label %.lr.ph5
  
  .lr.ph:                                           ; preds = %13, %.lr.ph.preheader
    %lsr.iv = phi i32* [ %scevgep1, %13 ], [ %scevgep, %.lr.ph.preheader ]
    %idx.02 = phi i32 [ %idx.1, %13 ], [ 0, %.lr.ph.preheader ]
    %i1.01 = phi i32 [ %14, %13 ], [ 1, %.lr.ph.preheader ]
    %scevgep2 = getelementptr i32, i32* %lsr.iv, i32 -1
    %4 = load i32, i32* %scevgep2, align 4
    %5 = load i32, i32* %lsr.iv, align 4
    %6 = icmp eq i32 %4, %5
    br i1 %6, label %13, label %7
  
  ; <label>:7                                       ; preds = %.lr.ph
    %8 = add nsw i32 %idx.02, 1
    %9 = getelementptr inbounds i32, i32* %mst, i32 %8
    store i32 %4, i32* %9, align 4
    %10 = add nsw i32 %idx.02, 2
    %11 = getelementptr inbounds i32, i32* %mst, i32 %10
    store i32 %5, i32* %11, align 4
    %12 = getelementptr inbounds i32, i32* %par, i32 %4
    store i32 %5, i32* %12, align 4
    br label %13
  
  ; <label>:13                                      ; preds = %7, %.lr.ph
    %idx.1 = phi i32 [ %10, %7 ], [ %idx.02, %.lr.ph ]
    %14 = add nuw nsw i32 %i1.01, 2
    %scevgep1 = getelementptr i32, i32* %lsr.iv, i32 2
    %15 = icmp slt i32 %14, %len
    br i1 %15, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %13, %.preheader, %0
    %idx.0.lcssa = phi i32 [ 0, %.preheader ], [ 0, %0 ], [ %idx.1, %13 ]
    %16 = sdiv i32 %idx.0.lcssa, 2
    %17 = add nsw i32 %16, 1
    store i32 %17, i32* %mst, align 4
    ret void
  }
  
  attributes #0 = { norecurse nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            kruskal_enter
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%17' }
  - { reg: '%a1', virtual-reg: '%18' }
  - { reg: '%a2', virtual-reg: '%19' }
  - { reg: '%a3', virtual-reg: '%20' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.8(62), %bb.7.._crit_edge(37)
    liveins: %a0, %a1, %a2, %a3
  
    %20 = COPY %a3
    %19 = COPY %a2
    %18 = COPY %a1
    %17 = COPY %a0
    %21 = ADDiu %zero, 0
    BLEZ %20, %bb.7.._crit_edge, implicit-def %at
  
  bb.8 (freq 16):
    successors: %bb.3..lr.ph5(100)
  
    %22 = ADDiu %zero, -1
    B %bb.3..lr.ph5, implicit-def %at
  
  bb.1..preheader (freq 16):
    successors: %bb.2..lr.ph.preheader(50), %bb.7.._crit_edge(50)
  
    %24 = SLTi %20, 2
    BNE killed %24, %zero, %bb.7.._crit_edge, implicit-def dead %at
    B %bb.2..lr.ph.preheader, implicit-def dead %at
  
  bb.2..lr.ph.preheader (freq 8):
    successors: %bb.4..lr.ph(100)
  
    %0 = ADDiu %17, 8
    %26 = ADDiu %zero, 1
    %25 = ADDiu %zero, 0
    B %bb.4..lr.ph, implicit-def dead %at
  
  bb.3..lr.ph5 (freq 511):
    successors: %bb.1..preheader(3), %bb.3..lr.ph5(96)
  
    %1 = PHI %18, %bb.8, %6, %bb.3..lr.ph5
    %2 = PHI %19, %bb.8, %5, %bb.3..lr.ph5
    %3 = PHI %21, %bb.8, %4, %bb.3..lr.ph5
    SW %22, %1, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv5)
    SW %3, %2, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.lsr.iv3)
    %6 = ADDiu %1, 4
    %5 = ADDiu %2, 4
    %4 = ADDiu %3, 1
    BEQ %20, %4, %bb.1..preheader, implicit-def dead %at
    B %bb.3..lr.ph5, implicit-def dead %at
  
  bb.4..lr.ph (freq 255):
    successors: %bb.6(50), %bb.5(50)
  
    %7 = PHI %0, %bb.2..lr.ph.preheader, %15, %bb.6
    %8 = PHI %25, %bb.2..lr.ph.preheader, %13, %bb.6
    %9 = PHI %26, %bb.2..lr.ph.preheader, %14, %bb.6
    %11 = LW %7, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.lsr.iv)
    %10 = LW %7, -4, <0x3ac3d40> = !{!"unison-memory-partition", i32 1} :: (load 4 from %ir.scevgep2)
    BEQ %10, %11, %bb.6, implicit-def dead %at
    B %bb.5, implicit-def dead %at
  
  bb.5 (%ir-block.7, freq 127):
    successors: %bb.6(100)
  
    %27 = SLL %8, 2
    %28 = ADDu killed %27, %18
    SW %10, killed %28, 4, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.9)
    %12 = ADDiu %8, 2
    %29 = SLL %12, 2
    %30 = ADDu %18, killed %29
    SW %11, killed %30, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.11)
    %31 = SLL %10, 2
    %32 = ADDu %19, killed %31
    SW %11, killed %32, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.12)
  
  bb.6 (%ir-block.13, freq 255):
    successors: %bb.4..lr.ph(96), %bb.7.._crit_edge(3)
  
    %13 = PHI %8, %bb.4..lr.ph, %12, %bb.5
    %14 = ADDiu %9, 2
    %33 = SLT %14, %20
    %15 = ADDiu %7, 8
    BNE killed %33, %zero, %bb.4..lr.ph, implicit-def dead %at
    B %bb.7.._crit_edge, implicit-def dead %at
  
  bb.7.._crit_edge (freq 25):
    liveouts:
  
    %16 = PHI %21, %bb.0, %21, %bb.1..preheader, %13, %bb.6
    %34 = SRL %16, 31
    %35 = ADDu %16, killed %34
    %36 = SRA killed %35, 1
    %37 = ADDiu killed %36, 1
    SW killed %37, %18, 0, <0x3ac3de0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.mst)
    RetRA

...
