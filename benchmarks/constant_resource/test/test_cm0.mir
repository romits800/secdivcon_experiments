--- |
  ; ModuleID = 'test_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @foo(i32 %a, i32 %b) #0 {
    %1 = add nsw i32 %a, %b
    ret i32 %1
  }
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @test_enter(i32 %a, i32 %b) #0 {
    %1 = icmp eq i32 %a, 0
    br i1 %1, label %2, label %4
  
  ; <label>:2                                       ; preds = %0
    %3 = call arm_aapcscc i32 @foo(i32 %a, i32 %b) #1
    br label %10
  
  ; <label>:4                                       ; preds = %0
    %5 = icmp eq i32 %b, 0
    br i1 %5, label %6, label %8
  
  ; <label>:6                                       ; preds = %4
    %7 = call arm_aapcscc i32 @foo(i32 %b, i32 %a) #1
    br label %10
  
  ; <label>:8                                       ; preds = %4
    %9 = call arm_aapcscc i32 @foo(i32 %a, i32 %b) #1
    br label %10
  
  ; <label>:10                                      ; preds = %6, %8, %2
    %res.1 = phi i32 [ %3, %2 ], [ %7, %6 ], [ %9, %8 ]
    ret i32 %res.1
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { nobuiltin }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            foo
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%0' }
  - { reg: '%r1', virtual-reg: '%1' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %r0, %r1
    liveouts: %r0
  
    %1 = COPY %r1
    %0 = COPY %r0
    %2, %cpsr = tADDrr %0, %1, 14, _
    %r0 = COPY %2
    tBX_RET 14, _, implicit %r0

...
--- |
  ; ModuleID = 'test_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @foo(i32 %a, i32 %b) #0 {
    %1 = add nsw i32 %a, %b
    ret i32 %1
  }
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @test_enter(i32 %a, i32 %b) #0 {
    %1 = icmp eq i32 %a, 0
    br i1 %1, label %2, label %4
  
  ; <label>:2                                       ; preds = %0
    %3 = call arm_aapcscc i32 @foo(i32 %a, i32 %b) #1
    br label %10
  
  ; <label>:4                                       ; preds = %0
    %5 = icmp eq i32 %b, 0
    br i1 %5, label %6, label %8
  
  ; <label>:6                                       ; preds = %4
    %7 = call arm_aapcscc i32 @foo(i32 %b, i32 %a) #1
    br label %10
  
  ; <label>:8                                       ; preds = %4
    %9 = call arm_aapcscc i32 @foo(i32 %a, i32 %b) #1
    br label %10
  
  ; <label>:10                                      ; preds = %6, %8, %2
    %res.1 = phi i32 [ %3, %2 ], [ %7, %6 ], [ %9, %8 ]
    ret i32 %res.1
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { nobuiltin }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            test_enter
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
  - { id: 3, class: tgpr }
  - { id: 4, class: tgpr }
  - { id: 5, class: tgpr }
  - { id: 6, class: tgpr }
  - { id: 7, class: tgpr }
  - { id: 8, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%4' }
  - { reg: '%r1', virtual-reg: '%5' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 34):
    successors: %bb.1(37), %bb.2(62)
    liveins: %r0, %r1
  
    %5 = COPY %r1
    %4 = COPY %r0
    tCMPi8 %4, 0, 14, _, implicit-def %cpsr
    tBcc %bb.2, 1, %cpsr
    tB %bb.1, 14, _
  
  bb.1 (%ir-block.2, freq 12):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %4
    %r1 = COPY %5
    tBL 14, _, @foo, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %8 = COPY %r0
    %0 = COPY %8
    tB %bb.5, 14, _
  
  bb.2 (%ir-block.4, freq 21):
    successors: %bb.3(37), %bb.4(62)
  
    tCMPi8 %5, 0, 14, _, implicit-def %cpsr
    tBcc %bb.4, 1, %cpsr
    tB %bb.3, 14, _
  
  bb.3 (%ir-block.6, freq 8):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %5
    %r1 = COPY %4
    tBL 14, _, @foo, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %7 = COPY %r0
    %1 = COPY %7
    tB %bb.5, 14, _
  
  bb.4 (%ir-block.8, freq 13):
    successors: %bb.5(100)
  
    ADJCALLSTACKDOWN 0, 14, _, implicit-def dead %sp, implicit %sp
    %r0 = COPY %4
    %r1 = COPY %5
    tBL 14, _, @foo, csr_aapcs, implicit-def dead %lr, implicit %sp, implicit %r0, implicit %r1, implicit-def %sp, implicit-def %r0
    ADJCALLSTACKUP 0, 0, 14, _, implicit-def dead %sp, implicit %sp
    %6 = COPY %r0
    %2 = COPY %6
  
  bb.5 (%ir-block.10, freq 34):
    liveouts: %r0
  
    %3 = PHI %2, %bb.4, %1, %bb.3, %0, %bb.1
    %r0 = COPY %3
    tBX_RET 14, _, implicit %r0

...
