--- |
  ; ModuleID = 'CPRR13-lut_wires_1_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @_Z18CPRR13_lut_wires_1iiiiiiiii(i32 %x, i32 %x0, i32 %r1_01, i32 %p1_01, i32 %r2_01, i32 %p2_01, i32 %r3_01, i32 %r4_01, i32 %Ox51) #0 {
    %1 = xor i32 %x, %x0
    %2 = xor i32 %x0, %p1_01
    %3 = xor i32 %r1_01, %2
    %4 = xor i32 %1, %p1_01
    %5 = xor i32 %3, %4
    %6 = xor i32 %x0, %p1_01
    %7 = xor i32 %6, %1
    %8 = xor i32 %5, %7
    %9 = xor i32 %8, %p1_01
    %10 = xor i32 %x0, %r1_01
    %11 = xor i32 %1, %9
    %12 = xor i32 %10, %p2_01
    %13 = xor i32 %r2_01, %12
    %14 = xor i32 %11, %p2_01
    %15 = xor i32 %13, %14
    %16 = xor i32 %10, %p2_01
    %17 = xor i32 %16, %11
    %18 = xor i32 %15, %17
    %19 = xor i32 %18, %p2_01
    %20 = xor i32 %10, %r2_01
    %21 = xor i32 %11, %19
    %22 = mul nsw i32 %20, %11
    %23 = xor i32 %r3_01, %22
    %24 = mul nsw i32 %21, %10
    %25 = xor i32 %23, %24
    %26 = mul nsw i32 %20, %10
    %27 = xor i32 %26, %r3_01
    %28 = mul nsw i32 %21, %11
    %29 = xor i32 %28, %25
    %30 = mul nsw i32 %27, %1
    %31 = xor i32 %r4_01, %30
    %32 = mul nsw i32 %29, %x0
    %33 = xor i32 %31, %32
    %34 = mul nsw i32 %27, %x0
    %35 = xor i32 %34, %r4_01
    %36 = mul nsw i32 %29, %1
    %37 = xor i32 %36, %33
    %38 = xor i32 %35, %Ox51
    %39 = xor i32 %38, %37
    ret i32 %39
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            _Z18CPRR13_lut_wires_1iiiiiiiii
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
  - { id: 3, class: tgpr }
  - { id: 4, class: tgpr }
  - { id: 5, class: tgpr }
  - { id: 6, class: tgpr }
  - { id: 7, class: tgpr }
  - { id: 8, class: tgpr }
  - { id: 9, class: tgpr }
  - { id: 10, class: tgpr }
  - { id: 11, class: tgpr }
  - { id: 12, class: tgpr }
  - { id: 13, class: tgpr }
  - { id: 14, class: tgpr }
  - { id: 15, class: tgpr }
  - { id: 16, class: tgpr }
  - { id: 17, class: tgpr }
  - { id: 18, class: tgpr }
  - { id: 19, class: tgpr }
  - { id: 20, class: tgpr }
  - { id: 21, class: tgpr }
  - { id: 22, class: tgpr }
  - { id: 23, class: tgpr }
  - { id: 24, class: tgpr }
  - { id: 25, class: tgpr }
  - { id: 26, class: tgpr }
  - { id: 27, class: tgpr }
  - { id: 28, class: tgpr }
  - { id: 29, class: tgpr }
  - { id: 30, class: tgpr }
  - { id: 31, class: tgpr }
  - { id: 32, class: tgpr }
  - { id: 33, class: tgpr }
  - { id: 34, class: tgpr }
  - { id: 35, class: tgpr }
  - { id: 36, class: tgpr }
  - { id: 37, class: tgpr }
  - { id: 38, class: tgpr }
  - { id: 39, class: tgpr }
  - { id: 40, class: tgpr }
  - { id: 41, class: tgpr }
  - { id: 42, class: tgpr }
  - { id: 43, class: tgpr }
  - { id: 44, class: tgpr }
  - { id: 45, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%0' }
  - { reg: '%r1', virtual-reg: '%1' }
  - { reg: '%r2', virtual-reg: '%2' }
  - { reg: '%r3', virtual-reg: '%3' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 16, size: 4, alignment: 8, isImmutable: true, isAliased: false }
  - { id: 1, offset: 12, size: 4, alignment: 4, isImmutable: true, isAliased: false }
  - { id: 2, offset: 8, size: 4, alignment: 8, isImmutable: true, isAliased: false }
  - { id: 3, offset: 4, size: 4, alignment: 4, isImmutable: true, isAliased: false }
  - { id: 4, offset: 0, size: 4, alignment: 8, isImmutable: true, isAliased: false }
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %r0, %r1, %r2, %r3
    liveouts: %r0, %r1
  
    %3 = COPY %r3
    %2 = COPY %r2
    %1 = COPY %r1
    %0 = COPY %r0
    %4, %cpsr = tEOR %0, %1, 14, _
    %5, %cpsr = tEOR %1, %3, 14, _
    %6, %cpsr = tEOR %5, %4, 14, _
    %7, %cpsr = tEOR %4, %3, 14, _
    %8, %cpsr = tEOR %2, %5, 14, _
    %9, %cpsr = tEOR %8, killed %7, 14, _
    %10, %cpsr = tEOR %9, killed %6, 14, _
    %11, %cpsr = tEOR %10, %3, 14, _
    %12, %cpsr = tEOR %4, killed %11, 14, _
    %13, %cpsr = tEOR %1, %2, 14, _
    %14 = tLDRspi %fixed-stack.3, 0, 14, _, <0x33cbc80> = !{!"unison-memory-partition", i32 0} :: (load 4 from stack)
    %15, %cpsr = tEOR %13, %14, 14, _
    %16, %cpsr = tEOR %15, %12, 14, _
    %17, %cpsr = tEOR %12, %14, 14, _
    %18 = tLDRspi %fixed-stack.4, 0, 14, _, <0x33cbcb0> = !{!"unison-memory-partition", i32 1} :: (load 4 from stack, align 8)
    %19, %cpsr = tEOR %18, %15, 14, _
    %20, %cpsr = tEOR %19, killed %17, 14, _
    %21, %cpsr = tEOR %20, killed %16, 14, _
    %22, %cpsr = tEOR %21, %14, 14, _
    %23, %cpsr = tEOR %12, killed %22, 14, _
    %24, %cpsr = tMUL %23, %12, 14, _
    %25, %cpsr = tMUL %23, %13, 14, _
    %26, %cpsr = tEOR %13, %18, 14, _
    %27, %cpsr = tMUL %26, %12, 14, _
    %28 = tLDRspi %fixed-stack.2, 0, 14, _, <0x33cc4f0> = !{!"unison-memory-partition", i32 2} :: (load 4 from stack, align 8)
    %29, %cpsr = tEOR %28, killed %27, 14, _
    %30, %cpsr = tEOR %29, killed %25, 14, _
    %31, %cpsr = tEOR %24, killed %30, 14, _
    %32, %cpsr = tMUL %31, %4, 14, _
    %33, %cpsr = tMUL %31, %1, 14, _
    %34, %cpsr = tMUL %26, %13, 14, _
    %35, %cpsr = tEOR %34, %28, 14, _
    %36, %cpsr = tMUL %35, %4, 14, _
    %37 = tLDRspi %fixed-stack.1, 0, 14, _, <0x33cc600> = !{!"unison-memory-partition", i32 3} :: (load 4 from stack)
    %38, %cpsr = tEOR %37, killed %36, 14, _
    %39, %cpsr = tEOR %38, killed %33, 14, _
    %40, %cpsr = tEOR %32, killed %39, 14, _
    %41, %cpsr = tMUL %35, %1, 14, _
    %42, %cpsr = tEOR %41, %37, 14, _
    %43 = tLDRspi %fixed-stack.0, 0, 14, _, <0x33cc630> = !{!"unison-memory-partition", i32 4} :: (load 4 from stack, align 8)
    %44, %cpsr = tEOR %42, killed %43, 14, _
    %r0 = COPY %40
    %r1 = COPY %44
    tBX_RET 14, _, implicit %r0, implicit %r1

...
