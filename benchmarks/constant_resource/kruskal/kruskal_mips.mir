--- |
  ; ModuleID = 'kruskal_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: nounwind readonly
  define i32 @find(i32 signext %x, i32* nocapture readonly %par) #0 {
    %1 = getelementptr inbounds i32, i32* %par, i32 %x
    %2 = load i32, i32* %1, align 4
    %3 = icmp eq i32 %2, %x
    %4 = tail call i32 @find(i32 signext %2, i32* %par) #2
    %x. = select i1 %3, i32 %x, i32 %4
    ret i32 %x.
  }
  
  ; Function Attrs: nounwind
  define void @kruskal_enter(i32* nocapture readonly %g, i32* nocapture %mst, i32* nocapture %par, i32 signext %len) #1 {
    %1 = icmp sgt i32 %len, 0
    br i1 %1, label %.lr.ph5, label %._crit_edge
  
  .preheader:                                       ; preds = %.lr.ph5
    %2 = icmp sgt i32 %len, 1
    br i1 %2, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr i32, i32* %g, i32 2
    br label %.lr.ph
  
  .lr.ph5:                                          ; preds = %0, %.lr.ph5
    %lsr.iv3 = phi i32 [ %lsr.iv.next, %.lr.ph5 ], [ 0, %0 ]
    %i.03 = phi i32 [ %5, %.lr.ph5 ], [ 0, %0 ]
    %3 = bitcast i32* %mst to i8*
    %4 = bitcast i32* %par to i8*
    %uglygep7 = getelementptr i8, i8* %3, i32 %lsr.iv3
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    store i32 -1, i32* %uglygep78, align 4
    %uglygep = getelementptr i8, i8* %4, i32 %lsr.iv3
    %uglygep5 = bitcast i8* %uglygep to i32*
    store i32 %i.03, i32* %uglygep5, align 4
    %5 = add nuw nsw i32 %i.03, 1
    %lsr.iv.next = add nuw i32 %lsr.iv3, 4
    %exitcond = icmp eq i32 %len, %5
    br i1 %exitcond, label %.preheader, label %.lr.ph5
  
  .lr.ph:                                           ; preds = %17, %.lr.ph.preheader
    %lsr.iv = phi i32* [ %scevgep1, %17 ], [ %scevgep, %.lr.ph.preheader ]
    %idx.02 = phi i32 [ %idx.1, %17 ], [ 0, %.lr.ph.preheader ]
    %i1.01 = phi i32 [ %18, %17 ], [ 1, %.lr.ph.preheader ]
    %scevgep2 = getelementptr i32, i32* %lsr.iv, i32 -1
    %6 = load i32, i32* %scevgep2, align 4
    %7 = tail call i32 @find(i32 signext %6, i32* %par) #2
    %8 = load i32, i32* %lsr.iv, align 4
    %9 = tail call i32 @find(i32 signext %8, i32* %par) #2
    %10 = icmp eq i32 %7, %9
    br i1 %10, label %17, label %11
  
  ; <label>:11                                      ; preds = %.lr.ph
    %12 = add nsw i32 %idx.02, 1
    %13 = getelementptr inbounds i32, i32* %mst, i32 %12
    store i32 %7, i32* %13, align 4
    %14 = add nsw i32 %idx.02, 2
    %15 = getelementptr inbounds i32, i32* %mst, i32 %14
    store i32 %9, i32* %15, align 4
    %16 = getelementptr inbounds i32, i32* %par, i32 %7
    store i32 %9, i32* %16, align 4
    br label %17
  
  ; <label>:17                                      ; preds = %11, %.lr.ph
    %idx.1 = phi i32 [ %14, %11 ], [ %idx.02, %.lr.ph ]
    %18 = add nuw nsw i32 %i1.01, 2
    %scevgep1 = getelementptr i32, i32* %lsr.iv, i32 2
    %19 = icmp slt i32 %18, %len
    br i1 %19, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %17, %.preheader, %0
    %idx.0.lcssa = phi i32 [ 0, %.preheader ], [ 0, %0 ], [ %idx.1, %17 ]
    %20 = sdiv i32 %idx.0.lcssa, 2
    %21 = add nsw i32 %20, 1
    store i32 %21, i32* %mst, align 4
    ret void
  }
  
  attributes #0 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #2 = { nobuiltin }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            find
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %a1, %t9, %v0
    liveouts: %v0
  
    %2 = ADDu %v0, %t9
    %1 = COPY %a1
    %0 = COPY %a0
    %3 = SLL %0, 2
    %4 = ADDu %1, killed %3
    %5 = LW killed %4, 0, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %6 = LW %2, target-flags(<unknown>) @find, <0x38aeaa0> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @find)
    %a0 = COPY %5
    %a1 = COPY %1
    %gp = COPY %2
    %t9 = COPY %6
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %7 = COPY %v0
    %8 = XOR %5, %0
    %9 = MOVZ_I_I %0, killed %8, %7
    %v0 = COPY %9
    RetRA implicit %v0

...
--- |
  ; ModuleID = 'kruskal_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: nounwind readonly
  define i32 @find(i32 signext %x, i32* nocapture readonly %par) #0 {
    %1 = getelementptr inbounds i32, i32* %par, i32 %x
    %2 = load i32, i32* %1, align 4
    %3 = icmp eq i32 %2, %x
    %4 = tail call i32 @find(i32 signext %2, i32* %par) #2
    %x. = select i1 %3, i32 %x, i32 %4
    ret i32 %x.
  }
  
  ; Function Attrs: nounwind
  define void @kruskal_enter(i32* nocapture readonly %g, i32* nocapture %mst, i32* nocapture %par, i32 signext %len) #1 {
    %1 = icmp sgt i32 %len, 0
    br i1 %1, label %.lr.ph5, label %._crit_edge
  
  .preheader:                                       ; preds = %.lr.ph5
    %2 = icmp sgt i32 %len, 1
    br i1 %2, label %.lr.ph.preheader, label %._crit_edge
  
  .lr.ph.preheader:                                 ; preds = %.preheader
    %scevgep = getelementptr i32, i32* %g, i32 2
    br label %.lr.ph
  
  .lr.ph5:                                          ; preds = %0, %.lr.ph5
    %lsr.iv3 = phi i32 [ %lsr.iv.next, %.lr.ph5 ], [ 0, %0 ]
    %i.03 = phi i32 [ %5, %.lr.ph5 ], [ 0, %0 ]
    %3 = bitcast i32* %mst to i8*
    %4 = bitcast i32* %par to i8*
    %uglygep7 = getelementptr i8, i8* %3, i32 %lsr.iv3
    %uglygep78 = bitcast i8* %uglygep7 to i32*
    store i32 -1, i32* %uglygep78, align 4
    %uglygep = getelementptr i8, i8* %4, i32 %lsr.iv3
    %uglygep5 = bitcast i8* %uglygep to i32*
    store i32 %i.03, i32* %uglygep5, align 4
    %5 = add nuw nsw i32 %i.03, 1
    %lsr.iv.next = add nuw i32 %lsr.iv3, 4
    %exitcond = icmp eq i32 %len, %5
    br i1 %exitcond, label %.preheader, label %.lr.ph5
  
  .lr.ph:                                           ; preds = %17, %.lr.ph.preheader
    %lsr.iv = phi i32* [ %scevgep1, %17 ], [ %scevgep, %.lr.ph.preheader ]
    %idx.02 = phi i32 [ %idx.1, %17 ], [ 0, %.lr.ph.preheader ]
    %i1.01 = phi i32 [ %18, %17 ], [ 1, %.lr.ph.preheader ]
    %scevgep2 = getelementptr i32, i32* %lsr.iv, i32 -1
    %6 = load i32, i32* %scevgep2, align 4
    %7 = tail call i32 @find(i32 signext %6, i32* %par) #2
    %8 = load i32, i32* %lsr.iv, align 4
    %9 = tail call i32 @find(i32 signext %8, i32* %par) #2
    %10 = icmp eq i32 %7, %9
    br i1 %10, label %17, label %11
  
  ; <label>:11                                      ; preds = %.lr.ph
    %12 = add nsw i32 %idx.02, 1
    %13 = getelementptr inbounds i32, i32* %mst, i32 %12
    store i32 %7, i32* %13, align 4
    %14 = add nsw i32 %idx.02, 2
    %15 = getelementptr inbounds i32, i32* %mst, i32 %14
    store i32 %9, i32* %15, align 4
    %16 = getelementptr inbounds i32, i32* %par, i32 %7
    store i32 %9, i32* %16, align 4
    br label %17
  
  ; <label>:17                                      ; preds = %11, %.lr.ph
    %idx.1 = phi i32 [ %14, %11 ], [ %idx.02, %.lr.ph ]
    %18 = add nuw nsw i32 %i1.01, 2
    %scevgep1 = getelementptr i32, i32* %lsr.iv, i32 2
    %19 = icmp slt i32 %18, %len
    br i1 %19, label %.lr.ph, label %._crit_edge
  
  ._crit_edge:                                      ; preds = %17, %.preheader, %0
    %idx.0.lcssa = phi i32 [ 0, %.preheader ], [ 0, %0 ], [ %idx.1, %17 ]
    %20 = sdiv i32 %idx.0.lcssa, 2
    %21 = add nsw i32 %20, 1
    store i32 %21, i32* %mst, align 4
    ret void
  }
  
  attributes #0 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #2 = { nobuiltin }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            kruskal_enter
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
  - { id: 23, class: gpr32 }
  - { id: 24, class: gpr32 }
  - { id: 25, class: gpr32 }
  - { id: 26, class: gpr32 }
  - { id: 27, class: gpr32 }
  - { id: 28, class: gpr32 }
  - { id: 29, class: gpr32 }
  - { id: 30, class: gpr32 }
  - { id: 31, class: gpr32 }
  - { id: 32, class: gpr32 }
  - { id: 33, class: gpr32 }
  - { id: 34, class: gpr32 }
  - { id: 35, class: gpr32 }
  - { id: 36, class: gpr32 }
  - { id: 37, class: gpr32 }
  - { id: 38, class: gpr32 }
  - { id: 39, class: gpr32 }
  - { id: 40, class: gpr32 }
  - { id: 41, class: gpr32 }
  - { id: 42, class: gpr32 }
  - { id: 43, class: gpr32 }
  - { id: 44, class: gpr32 }
  - { id: 45, class: gpr32 }
  - { id: 46, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%15' }
  - { reg: '%a1', virtual-reg: '%16' }
  - { reg: '%a2', virtual-reg: '%17' }
  - { reg: '%a3', virtual-reg: '%18' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 25):
    successors: %bb.8(62), %bb.7.._crit_edge(37)
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
  
    %27 = ADDu %v0, %t9
    %18 = COPY %a3
    %17 = COPY %a2
    %16 = COPY %a1
    %15 = COPY %a0
    %19 = ADDiu %zero, 0
    BLEZ %18, %bb.7.._crit_edge, implicit-def %at
  
  bb.8 (freq 16):
    successors: %bb.3..lr.ph5(100)
  
    %21 = ADDiu %zero, -1
    B %bb.3..lr.ph5, implicit-def %at
  
  bb.1..preheader (freq 16):
    successors: %bb.2..lr.ph.preheader(50), %bb.7.._crit_edge(50)
  
    %24 = SLTi %18, 2
    BNE killed %24, %zero, %bb.7.._crit_edge, implicit-def dead %at
    B %bb.2..lr.ph.preheader, implicit-def dead %at
  
  bb.2..lr.ph.preheader (freq 8):
    successors: %bb.4..lr.ph(100)
  
    %0 = ADDiu %15, 8
    %26 = ADDiu %zero, 1
    %25 = ADDiu %zero, 0
    B %bb.4..lr.ph, implicit-def dead %at
  
  bb.3..lr.ph5 (freq 511):
    successors: %bb.1..preheader(3), %bb.3..lr.ph5(96)
  
    %1 = PHI %19, %bb.8, %4, %bb.3..lr.ph5
    %2 = PHI %19, %bb.8, %3, %bb.3..lr.ph5
    %20 = ADDu %16, %1
    SW %21, killed %20, 0, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.uglygep78)
    %22 = ADDu %17, %1
    SW %2, killed %22, 0, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.uglygep5)
    %4 = ADDiu %1, 4
    %3 = ADDiu %2, 1
    BEQ %18, %3, %bb.1..preheader, implicit-def dead %at
    B %bb.3..lr.ph5, implicit-def dead %at
  
  bb.4..lr.ph (freq 255):
    successors: %bb.6(50), %bb.5(50)
  
    %5 = PHI %0, %bb.2..lr.ph.preheader, %13, %bb.6
    %6 = PHI %25, %bb.2..lr.ph.preheader, %11, %bb.6
    %7 = PHI %26, %bb.2..lr.ph.preheader, %12, %bb.6
    %28 = LW %5, -4, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.scevgep2)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %29 = LW %27, target-flags(<unknown>) @find, <0x38aeaa0> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @find)
    %a0 = COPY %28
    %a1 = COPY %17
    %gp = COPY %27
    %t9 = COPY %29
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %30 = COPY %v0
    %31 = LW %5, 0, <0x38aa690> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.lsr.iv)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %32 = LW %27, target-flags(<unknown>) @find, <0x38b4710> = !{!"unison-memory-partition", i32 3} :: (load 4 from call-entry @find)
    %a0 = COPY %31
    %a1 = COPY %17
    %t9 = COPY %32
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %33 = COPY %v0
    BEQ %30, %33, %bb.6, implicit-def dead %at
    B %bb.5, implicit-def dead %at
  
  bb.5 (%ir-block.11, freq 127):
    successors: %bb.6(100)
  
    %8 = COPY %30
    %9 = COPY %33
    %34 = SLL %6, 2
    %35 = ADDu killed %34, %16
    SW %8, killed %35, 4, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.13)
    %10 = ADDiu %6, 2
    %36 = SLL %10, 2
    %37 = ADDu %16, killed %36
    SW %9, killed %37, 0, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.15)
    %38 = SLL %30, 2
    %39 = ADDu %17, killed %38
    SW %9, killed %39, 0, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.16)
  
  bb.6 (%ir-block.17, freq 255):
    successors: %bb.4..lr.ph(96), %bb.7.._crit_edge(3)
  
    %11 = PHI %6, %bb.4..lr.ph, %10, %bb.5
    %12 = ADDiu %7, 2
    %40 = SLT %12, %18
    %13 = ADDiu %5, 8
    BNE killed %40, %zero, %bb.4..lr.ph, implicit-def dead %at
    B %bb.7.._crit_edge, implicit-def dead %at
  
  bb.7.._crit_edge (freq 25):
    liveouts:
  
    %14 = PHI %19, %bb.0, %19, %bb.1..preheader, %11, %bb.6
    %41 = SRL %14, 31
    %42 = ADDu %14, killed %41
    %43 = SRA killed %42, 1
    %44 = ADDiu killed %43, 1
    SW killed %44, %16, 0, <0x38aeba0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.mst)
    RetRA

...
